/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.au.cc.gallery.ui;

import java.util.*;
import javax.servlet.MultipartConfigElement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.io.InputStream;

import static spark.Spark.*;
import spark.ModelAndView;
import spark.Request;
import spark.Response;

import spark.template.handlebars.HandlebarsTemplateEngine;

import edu.au.cc.gallery.data.*;
import edu.au.cc.gallery.aws.*;

public class App {

	private static String bucketName = "edu.au.cc.image-gallery";

	private static UserImageDAO getUserImageDAO() throws Exception {
                return GenerateUserImageDAO.getUserImageDAO();
        }

	public static String addImage(Request req, Response res) {
		Map<String, Object> model = new HashMap<String, Object>();
		String username = req.session().attribute("user");
		model.put("username", username);
		return new HandlebarsTemplateEngine()
                        .render(new ModelAndView(model, "addimage.hbs"));
	}

	public static String postAddImage(Request req, Response res) {
		try {
                 	String username = req.session().attribute("user");
			User user = Admin.getUserDAO().getUserByUsername(username);
			String uuid = UUID.randomUUID().toString();

			req.attribute("org.eclipse.jetty.multipartConfig", new MultipartConfigElement("/temp"));
                        InputStream is = req.raw().getPart("uploaded_image").getInputStream();
			byte[] imageData = is.readAllBytes();

			Image image = new Image(user, uuid);
			getUserImageDAO().addImageDB(user, image);
			getUserImageDAO().addImageS3(user, image, imageData, "image/png");

		} catch (Exception e) {
			return "Error in postAddImage: " + e.toString();
		}
			res.redirect("/");
			return "";
		}

	public static String viewImages(Request req, Response res) {
	try {
		Map<String, Object> model = new HashMap<String, Object>();
                User currentUser = Admin.getUserDAO().getUserByUsername(req.session().attribute("user"));
		model.put("images", getUserImageDAO().getAllUserImages(currentUser));
		model.put("bucketName", bucketName);
		model.put("user", currentUser.getUsername());
                return new HandlebarsTemplateEngine()
                        .render(new ModelAndView(model, "viewimages.hbs"));
	} catch (Exception e) {
		return "Error in viewImages: " + e.getMessage();
		}
	}

	public static String viewSingleImage(Request req, Response res) {
	try {
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("bucketName", bucketName);
		model.put("uuid", req.params("uuid"));
	 	return new HandlebarsTemplateEngine()
                        .render(new ModelAndView(model, "viewsingleimage.hbs"));
        } catch (Exception e) {
                return "Error in viewSingleImage: " + e.getMessage();
                }
        }

	public static String deleteImage(Request req, Response res) {
                Map<String, Object> model = new HashMap<>();
                model.put("title", "Delete Image");
                model.put("message", "Are you sure that you want to delete this image?");
                model.put("onYes", "/user/" + req.params(":username") + "/deleteimageexec/" + req.params(":uuid"));
                model.put("onNo", "/");
                return new HandlebarsTemplateEngine()
                        .render(new ModelAndView(model, "confirm.hbs"));
        }

	public static String deleteImageExec(Request req, Response res) {
	try {
                User currentUser = Admin.getUserDAO().getUserByUsername(req.session().attribute("user"));
		String deleteUUID = req.params(":uuid");
//		model.put("bucketName", bucketName);
//		model.put("uuid", deleteUUID);

		getUserImageDAO().deleteImageDB(currentUser, deleteUUID);
		getUserImageDAO().deleteImageS3(deleteUUID);
		res.redirect("/");
	 	//return new HandlebarsTemplateEngine()
                  //      .render(new ModelAndView(model, "deleteImage.hbs"));
        } catch (Exception e) {
                return "Error in deleteImage: " + e.getMessage();
                }
		return null;
        }
    	public static void main(String[] args) throws Exception {
		String portString = System.getenv("JETTY_PORT");
           		if (portString == null || portString.equals("")) {
             		port(5000);
          	}  else {
           		port(Integer.parseInt(portString));
	  	}

//		Routes.connectToDatabase();
//		new Routes().addRoutes();
		new Admin().addRoutes();
//		DB db = new DB();
		//UserAdmin.main(null);
//		DB.demo();
    }
}
